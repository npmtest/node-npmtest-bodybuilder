{"/home/travis/build/npmtest/node-npmtest-bodybuilder/test.js":"/* istanbul instrument in package npmtest_bodybuilder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bodybuilder/lib.npmtest_bodybuilder.js":"/* istanbul instrument in package npmtest_bodybuilder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bodybuilder = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bodybuilder = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bodybuilder/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bodybuilder && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bodybuilder */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bodybuilder\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bodybuilder.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_bodybuilder.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bodybuilder.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_bodybuilder.__dirname + '/lib.npmtest_bodybuilder.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bodybuilder/node_modules/bodybuilder/lib/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _merge = require('lodash/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _set = require('lodash/set');\n\nvar _set2 = _interopRequireDefault(_set);\n\nvar _isEmpty = require('lodash/isEmpty');\n\nvar _isEmpty2 = _interopRequireDefault(_isEmpty);\n\nvar _cloneDeep = require('lodash/cloneDeep');\n\nvar _cloneDeep2 = _interopRequireDefault(_cloneDeep);\n\nvar _each = require('lodash/each');\n\nvar _each2 = _interopRequireDefault(_each);\n\nvar _isPlainObject = require('lodash/isPlainObject');\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nvar _isArray = require('lodash/isArray');\n\nvar _isArray2 = _interopRequireDefault(_isArray);\n\nexports.default = bodybuilder;\n\nvar _queryBuilder = require('./query-builder');\n\nvar _queryBuilder2 = _interopRequireDefault(_queryBuilder);\n\nvar _filterBuilder = require('./filter-builder');\n\nvar _filterBuilder2 = _interopRequireDefault(_filterBuilder);\n\nvar _aggregationBuilder = require('./aggregation-builder');\n\nvar _aggregationBuilder2 = _interopRequireDefault(_aggregationBuilder);\n\nvar _utils = require('./utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * **http://bodybuilder.js.org**\n *\n * **https://github.com/danpaz/bodybuilder**\n *\n * Bodybuilder is a small library that makes elasticsearch queries easier to\n * write, read, and maintain 💪. The whole public api is documented here, but\n * how about a simple example to get started:\n *\n * ```\n * bodybuilder()\n *   .query('match', 'message', 'this is a test')\n *   .build()\n *\n * // results in:\n * {\n *   query: {\n *     match: {\n *       message: 'this is a test'\n *     }\n *   }\n * }\n * ```\n *\n * You can chain multiple methods together to build up a more complex query.\n *\n * ```\n * bodybuilder()\n *   .query('match', 'message', 'this is a test')\n *   .filter('term', 'user', 'kimchy')\n *   .notFilter('term', 'user', 'cassie')\n *   .aggregation('terms', 'user')\n *   .build()\n * ```\n *\n * For nested sub-queries or sub-aggregations, pass a function as the last\n * argument and build the nested clause in the body of that function. For\n * example:\n *\n * ```\n * bodybuilder()\n *   .query('nested', 'path', 'obj1', (q) => {\n *     return q.query('match', 'obj1.color', 'blue')\n *   })\n *   .build()\n * ```\n *\n * The entire elasticsearch query DSL is available using the bodybuilder api.\n * There are many more examples in the docs as well as in the tests.\n *\n * @return {bodybuilder} Builder.\n */\nfunction bodybuilder() {\n  var body = {};\n\n  return Object.assign({\n    /**\n     * Set a sort direction on a given field.\n     *\n     * @param  {String} field             Field name.\n     * @param  {String} [direction='asc'] A valid direction: 'asc' or 'desc'.\n     * @returns {bodybuilder} Builder.\n     */\n    sort: function sort(field) {\n      var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';\n\n      body.sort = body.sort || [];\n\n      if ((0, _isArray2.default)(field)) {\n\n        if ((0, _isPlainObject2.default)(body.sort)) {\n          body.sort = [body.sort];\n        }\n\n        if ((0, _isArray2.default)(body.sort)) {\n          (0, _each2.default)(field, function (sorts) {\n            (0, _each2.default)(sorts, function (value, key) {\n              (0, _utils.sortMerge)(body.sort, key, value);\n            });\n          });\n        }\n      } else {\n        (0, _utils.sortMerge)(body.sort, field, direction);\n      }\n      return this;\n    },\n\n\n    /**\n     * Set a *from* offset value, for paginating a query.\n     *\n     * @param  {Number} quantity The offset from the first result you want to\n     *                           fetch.\n     * @returns {bodybuilder} Builder.\n     */\n    from: function from(quantity) {\n      body.from = quantity;\n      return this;\n    },\n\n\n    /**\n     * Set a *size* value for maximum results to return.\n     *\n     * @param  {Number} quantity Maximum number of results to return.\n     * @returns {bodybuilder} Builder.\n     */\n    size: function size(quantity) {\n      body.size = quantity;\n      return this;\n    },\n\n\n    /**\n     * Set any key-value on the elasticsearch body.\n     *\n     * @param  {String} k Key.\n     * @param  {any}    v Value.\n     * @returns {bodybuilder} Builder.\n     */\n    rawOption: function rawOption(k, v) {\n      body[k] = v;\n      return this;\n    },\n\n\n    /**\n     * Collect all queries, filters, and aggregations and build the entire\n     * elasticsearch query.\n     *\n     * @param  {string} [version] (optional) Pass `'v1'` to build for the\n     *                            elasticsearch 1.x query dsl.\n     *\n     * @return {Object} Elasticsearch query body.\n     */\n    build: function build(version) {\n      var queries = this.getQuery();\n      var filters = this.getFilter();\n      var aggregations = this.getAggregations();\n\n      if (version === 'v1') {\n        return _buildV1(body, queries, filters, aggregations);\n      }\n\n      return _build(body, queries, filters, aggregations);\n    }\n  }, (0, _queryBuilder2.default)(), (0, _filterBuilder2.default)(), (0, _aggregationBuilder2.default)());\n}\n\nfunction _buildV1(body, queries, filters, aggregations) {\n  var clonedBody = (0, _cloneDeep2.default)(body);\n\n  if (!(0, _isEmpty2.default)(filters)) {\n    (0, _set2.default)(clonedBody, 'query.filtered.filter', filters);\n\n    if (!(0, _isEmpty2.default)(queries)) {\n      (0, _set2.default)(clonedBody, 'query.filtered.query', queries);\n    }\n  } else if (!(0, _isEmpty2.default)(queries)) {\n    (0, _set2.default)(clonedBody, 'query', queries);\n  }\n\n  if (!(0, _isEmpty2.default)(aggregations)) {\n    (0, _set2.default)(clonedBody, 'aggregations', aggregations);\n  }\n  return clonedBody;\n}\n\nfunction _build(body, queries, filters, aggregations) {\n  var clonedBody = (0, _cloneDeep2.default)(body);\n\n  if (!(0, _isEmpty2.default)(filters)) {\n    var filterBody = {};\n    var queryBody = {};\n    (0, _set2.default)(filterBody, 'query.bool.filter', filters);\n    if (!(0, _isEmpty2.default)(queries.bool)) {\n      (0, _set2.default)(queryBody, 'query.bool', queries.bool);\n    } else if (!(0, _isEmpty2.default)(queries)) {\n      (0, _set2.default)(queryBody, 'query.bool.must', queries);\n    }\n    (0, _merge2.default)(clonedBody, filterBody, queryBody);\n  } else if (!(0, _isEmpty2.default)(queries)) {\n    (0, _set2.default)(clonedBody, 'query', queries);\n  }\n\n  if (!(0, _isEmpty2.default)(aggregations)) {\n    (0, _set2.default)(clonedBody, 'aggs', aggregations);\n  }\n\n  return clonedBody;\n}\n\nmodule.exports = bodybuilder;","/home/travis/build/npmtest/node-npmtest-bodybuilder/node_modules/bodybuilder/lib/query-builder.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _size = require('lodash/size');\n\nvar _size2 = _interopRequireDefault(_size);\n\nvar _last = require('lodash/last');\n\nvar _last2 = _interopRequireDefault(_last);\n\nvar _isFunction = require('lodash/isFunction');\n\nvar _isFunction2 = _interopRequireDefault(_isFunction);\n\nvar _get = require('lodash/get');\n\nvar _get2 = _interopRequireDefault(_get);\n\nexports.default = queryBuilder;\n\nvar _utils = require('./utils');\n\nvar _filterBuilder = require('./filter-builder');\n\nvar _filterBuilder2 = _interopRequireDefault(_filterBuilder);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction queryBuilder() {\n  var query = {};\n\n  function addMinimumShouldMatch(str) {\n    var shouldClause = (0, _get2.default)(query, 'bool.should');\n    if (shouldClause && shouldClause.length > 1) {\n      query.bool['minimum_should_match'] = str;\n    }\n  }\n\n  function makeQuery(boolType, queryType) {\n    var nested = {};\n\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    if ((0, _isFunction2.default)((0, _last2.default)(args))) {\n      var nestedCallback = args.pop();\n      var nestedResult = nestedCallback(Object.assign({}, queryBuilder(), (0, _filterBuilder2.default)()));\n      if (nestedResult.hasQuery()) {\n        nested.query = nestedResult.getQuery();\n      }\n      if (nestedResult.hasFilter()) {\n        nested.filter = nestedResult.getFilter();\n      }\n    }\n\n    query = (0, _utils.boolMerge)(_defineProperty({}, queryType, Object.assign(_utils.buildClause.apply(undefined, args), nested)), query, boolType);\n  }\n\n  return {\n    /**\n     * Add a query clause to the query body.\n     *\n     * @param  {string}        type    Query type.\n     * @param  {string|Object} field   Field to query or complete query clause.\n     * @param  {string|Object} value   Query term or inner clause.\n     * @param  {Object}        options (optional) Additional options for the\n     *                                 query clause.\n     * @param  {Function}      [nest]  (optional) A function used to define\n     *                                 sub-filters as children. This _must_ be\n     *                                 the last argument.\n     *\n     * @return {bodybuilder} Builder.\n     *\n     * @example\n     * bodybuilder()\n     *   .query('match_all')\n     *   .build()\n     *\n     * bodybuilder()\n     *   .query('match_all', { boost: 1.2 })\n     *   .build()\n     *\n     * bodybuilder()\n     *   .query('match', 'message', 'this is a test')\n     *   .build()\n     *\n     * bodybuilder()\n     *   .query('terms', 'user', ['kimchy', 'elastic'])\n     *   .build()\n     *\n     * bodybuilder()\n     *   .query('nested', { path: 'obj1', score_mode: 'avg' }, (q) => {\n     *     return q\n     *       .query('match', 'obj1.name', 'blue')\n     *       .query('range', 'obj1.count', {gt: 5})\n     *   })\n     *   .build()\n     */\n    query: function query() {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      makeQuery.apply(undefined, ['and'].concat(args));\n      return this;\n    },\n\n\n    /**\n     * Alias for `query`.\n     *\n     * @return {bodybuilder} Builder.\n     */\n    andQuery: function andQuery() {\n      return this.query.apply(this, arguments);\n    },\n\n\n    /**\n     * Alias for `query`.\n     *\n     * @return {bodybuilder} Builder.\n     */\n    addQuery: function addQuery() {\n      return this.query.apply(this, arguments);\n    },\n\n\n    /**\n     * Add a \"should\" query to the query body.\n     *\n     * Same arguments as `query`.\n     *\n     * @return {bodybuilder} Builder.\n     */\n    orQuery: function orQuery() {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      makeQuery.apply(undefined, ['or'].concat(args));\n      return this;\n    },\n\n\n    /**\n     * Add a \"must_not\" query to the query body.\n     *\n     * Same arguments as `query`.\n     *\n     * @return {bodybuilder} Builder.\n     */\n    notQuery: function notQuery() {\n      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      makeQuery.apply(undefined, ['not'].concat(args));\n      return this;\n    },\n\n\n    /**\n     * Set the `minimum_should_match` property on a bool query with more than\n     * one `should` clause.\n     *\n     * @param  {any} param  minimum_should_match parameter. For possible values\n     *                      see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-minimum-should-match.html\n     * @return {bodybuilder} Builder.\n     */\n    queryMinimumShouldMatch: function queryMinimumShouldMatch(param) {\n      addMinimumShouldMatch(param);\n      return this;\n    },\n    getQuery: function getQuery() {\n      return query;\n    },\n    hasQuery: function hasQuery() {\n      return !!(0, _size2.default)(query);\n    }\n  };\n}","/home/travis/build/npmtest/node-npmtest-bodybuilder/node_modules/bodybuilder/lib/utils.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isObject = require('lodash/isObject');\n\nvar _isObject2 = _interopRequireDefault(_isObject);\n\nvar _isNil = require('lodash/isNil');\n\nvar _isNil2 = _interopRequireDefault(_isNil);\n\nvar _extend = require('lodash/extend');\n\nvar _extend2 = _interopRequireDefault(_extend);\n\nvar _findIndex = require('lodash/findIndex');\n\nvar _findIndex2 = _interopRequireDefault(_findIndex);\n\nvar _assign = require('lodash/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nvar _isEmpty = require('lodash/isEmpty');\n\nvar _isEmpty2 = _interopRequireDefault(_isEmpty);\n\nvar _isArray = require('lodash/isArray');\n\nvar _isArray2 = _interopRequireDefault(_isArray);\n\nvar _assignWith = require('lodash/assignWith');\n\nvar _assignWith2 = _interopRequireDefault(_assignWith);\n\nvar _isPlainObject = require('lodash/isPlainObject');\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nexports.mergeConcat = mergeConcat;\nexports.boolMerge = boolMerge;\nexports.sortMerge = sortMerge;\nexports.buildClause = buildClause;\n\nvar _boolQuery = require('./bool-query');\n\nvar _boolQuery2 = _interopRequireDefault(_boolQuery);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Extends lodash's assignWith by allowing array concatenation\n * and deep merging.\n *\n * @private\n *\n * @param {Object} target Target.\n * @returns {Object} Merged object.\n */\nfunction mergeConcat() {\n  var args = Array.prototype.slice.call(arguments, 0);\n  args.push(function customizer(a, b) {\n    if ((0, _isPlainObject2.default)(a)) {\n      return (0, _assignWith2.default)(a, b, customizer);\n    } else if ((0, _isArray2.default)(a)) {\n      return a.concat(b);\n    } else {\n      return b;\n    }\n  });\n  return _assignWith2.default.apply(null, args);\n}\n\n/**\n * Merge two filters or queries using their Boolean counterparts.\n *\n * @private\n *\n * @param  {Object} newObj      New filter or query to add.\n * @param  {Object} currentObj  Old filter or query to merge into.\n * @param  {String} boolType    Type of boolean ('and', 'or', 'not').\n * @returns {Object} Combined filter or query.\n */\nfunction boolMerge(newObj, currentObj) {\n  var boolType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'and';\n\n  var boolCurrent = void 0;\n  var boolNew = void 0;\n\n  // Only one, no need for bool.\n  if ((0, _isEmpty2.default)(currentObj)) {\n    // Allow starting with 'or' and 'not' queries.\n    if (boolType !== 'and') {\n      return (0, _boolQuery2.default)(boolType, newObj);\n    }\n    return newObj;\n  }\n\n  // Make bools out of the new and existing filters.\n  boolCurrent = currentObj.bool ? currentObj : (0, _boolQuery2.default)('must', currentObj);\n  boolNew = newObj.bool ? newObj : (0, _boolQuery2.default)(boolType, newObj);\n\n  return mergeConcat({}, boolCurrent, boolNew);\n}\n\n/**\n * Compound sort function into the list of sorts\n *\n * @private\n *\n * @param  {Array} current Array of Elasticsearch sorts.\n * @param  {String} field Field to sort.\n * @param  {String|Object} value A valid direction ('asc', 'desc') or object with sort options\n * @returns {Array} Array of Elasticsearch sorts.\n */\nfunction sortMerge(current, field, value) {\n  var payload = void 0;\n\n  if ((0, _isPlainObject2.default)(value)) {\n    payload = _defineProperty({}, field, (0, _assign2.default)({}, value));\n  } else {\n    payload = _defineProperty({}, field, { order: value });\n  }\n\n  var idx = (0, _findIndex2.default)(current, function (o) {\n    return o[field] != undefined;\n  });\n\n  if (idx == -1) {\n    current.push(payload);\n  } else {\n    (0, _extend2.default)(current[idx], payload);\n  }\n\n  return current;\n}\n\n/**\n * Generic builder for query, filter, or aggregation clauses.\n *\n * @private\n *\n * @param  {string|Object} field Field name or complete clause.\n * @param  {string|Object} value Field value or inner clause.\n * @param  {Object}        opts  Additional key-value pairs.\n *\n * @return {Object} Clause\n */\nfunction buildClause(field, value, opts) {\n  var hasField = !(0, _isNil2.default)(field);\n  var hasValue = !(0, _isNil2.default)(value);\n  var mainClause = {};\n\n  if (hasValue) {\n    mainClause = _defineProperty({}, field, value);\n  } else if ((0, _isObject2.default)(field)) {\n    mainClause = field;\n  } else if (hasField) {\n    mainClause = { field: field };\n  }\n\n  return Object.assign({}, mainClause, opts);\n}","/home/travis/build/npmtest/node-npmtest-bodybuilder/node_modules/bodybuilder/lib/bool-query.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = boolQuery;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar CONDITIONS_MAP = {\n  must: 'must',\n  should: 'should',\n  must_not: 'must_not',\n  mustNot: 'must_not',\n  and: 'must',\n  or: 'should',\n  not: 'must_not'\n};\n\n/**\n * Construct a Boolean query.\n *\n * @private\n * @memberof Queries\n *\n * @param  {String} condition Boolean condition: must, must_not, should.\n * @param  {Object} query     Fully-formed query.\n * @return {Object}           Boolean query.\n */\nfunction boolQuery(condition, query) {\n  var cond = CONDITIONS_MAP[condition];\n  return {\n    bool: _defineProperty({}, cond, [query])\n  };\n}","/home/travis/build/npmtest/node-npmtest-bodybuilder/node_modules/bodybuilder/lib/filter-builder.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _size = require('lodash/size');\n\nvar _size2 = _interopRequireDefault(_size);\n\nvar _last = require('lodash/last');\n\nvar _last2 = _interopRequireDefault(_last);\n\nvar _isFunction = require('lodash/isFunction');\n\nvar _isFunction2 = _interopRequireDefault(_isFunction);\n\nvar _get = require('lodash/get');\n\nvar _get2 = _interopRequireDefault(_get);\n\nexports.default = filterBuilder;\n\nvar _utils = require('./utils');\n\nvar _queryBuilder = require('./query-builder');\n\nvar _queryBuilder2 = _interopRequireDefault(_queryBuilder);\n\nvar _aggregationBuilder = require('./aggregation-builder');\n\nvar _aggregationBuilder2 = _interopRequireDefault(_aggregationBuilder);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction filterBuilder() {\n  var filter = {};\n\n  function addMinimumShouldMatch(str) {\n    var shouldClause = (0, _get2.default)(filter, 'bool.should');\n    if (shouldClause && shouldClause.length > 1) {\n      filter.bool['minimum_should_match'] = str;\n    }\n  }\n\n  function makeFilter(boolType, filterType) {\n    var nested = {};\n\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    if ((0, _isFunction2.default)((0, _last2.default)(args))) {\n      var nestedCallback = args.pop();\n      var nestedResult = nestedCallback(Object.assign({}, (0, _queryBuilder2.default)(), filterBuilder(), (0, _aggregationBuilder2.default)()));\n      if (nestedResult.hasQuery()) {\n        nested.query = nestedResult.getQuery();\n      }\n      if (nestedResult.hasFilter()) {\n        nested.filter = nestedResult.getFilter();\n      }\n      if (nestedResult.hasAggregations()) {\n        nested.aggs = nestedResult.getAggregations();\n      }\n    }\n\n    filter = (0, _utils.boolMerge)(_defineProperty({}, filterType, Object.assign(_utils.buildClause.apply(undefined, args), nested)), filter, boolType);\n  }\n\n  return {\n    /**\n     * Add a filter clause to the query body.\n     *\n     * @param  {string}        type    Filter type.\n     * @param  {string|Object} field   Field to filter or complete filter\n     *                                 clause.\n     * @param  {string|Object} value   Filter term or inner clause.\n     * @param  {Object}        options (optional) Additional options for the\n     *                                 filter clause.\n     * @param  {Function}      [nest]  (optional) A function used to define\n     *                                 sub-filters as children. This _must_ be\n     *                                 the last argument.\n     *\n     * @return {bodybuilder} Builder.\n     *\n     * @example\n     * bodybuilder()\n     *   .filter('term', 'user', 'kimchy')\n     *   .build()\n     */\n    filter: function filter() {\n      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      makeFilter.apply(undefined, ['and'].concat(args));\n      return this;\n    },\n\n\n    /**\n     * Alias for `filter`.\n     *\n     * @return {bodybuilder} Builder.\n     */\n    andFilter: function andFilter() {\n      return this.filter.apply(this, arguments);\n    },\n\n\n    /**\n     * Alias for `filter`.\n     *\n     * @return {bodybuilder} Builder.\n     */\n    addFilter: function addFilter() {\n      return this.filter.apply(this, arguments);\n    },\n\n\n    /**\n     * Add a \"should\" filter to the query body.\n     *\n     * Same arguments as `filter`.\n     *\n     * @return {bodybuilder} Builder.\n     */\n    orFilter: function orFilter() {\n      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      makeFilter.apply(undefined, ['or'].concat(args));\n      return this;\n    },\n\n\n    /**\n     * Add a \"must_not\" filter to the query body.\n     *\n     * Same arguments as `filter`.\n     *\n     * @return {bodybuilder} Builder.\n     */\n    notFilter: function notFilter() {\n      for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      makeFilter.apply(undefined, ['not'].concat(args));\n      return this;\n    },\n\n\n    /**\n     * Set the `minimum_should_match` property on a bool filter with more than\n     * one `should` clause.\n     *\n     * @param  {any} param  minimum_should_match parameter. For possible values\n     *                      see https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-minimum-should-match.html\n     * @return {bodybuilder} Builder.\n     */\n    filterMinimumShouldMatch: function filterMinimumShouldMatch(param) {\n      addMinimumShouldMatch(param);\n      return this;\n    },\n    getFilter: function getFilter() {\n      return filter;\n    },\n    hasFilter: function hasFilter() {\n      return !!(0, _size2.default)(filter);\n    }\n  };\n}","/home/travis/build/npmtest/node-npmtest-bodybuilder/node_modules/bodybuilder/lib/aggregation-builder.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _size = require('lodash/size');\n\nvar _size2 = _interopRequireDefault(_size);\n\nvar _isFunction = require('lodash/isFunction');\n\nvar _isFunction2 = _interopRequireDefault(_isFunction);\n\nvar _isPlainObject = require('lodash/isPlainObject');\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nvar _isString = require('lodash/isString');\n\nvar _isString2 = _interopRequireDefault(_isString);\n\nvar _find = require('lodash/find');\n\nvar _find2 = _interopRequireDefault(_find);\n\nexports.default = aggregationBuilder;\n\nvar _utils = require('./utils');\n\nvar _filterBuilder = require('./filter-builder');\n\nvar _filterBuilder2 = _interopRequireDefault(_filterBuilder);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction aggregationBuilder() {\n  var aggregations = {};\n\n  function makeAggregation(type, field) {\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    var aggName = (0, _find2.default)(args, _isString2.default) || 'agg_' + type + '_' + field;\n    var opts = (0, _find2.default)(args, _isPlainObject2.default);\n    var nested = (0, _find2.default)(args, _isFunction2.default);\n    var nestedClause = {};\n\n    if ((0, _isFunction2.default)(nested)) {\n      var nestedResult = nested(Object.assign({}, aggregationBuilder(), (0, _filterBuilder2.default)()));\n      if (nestedResult.hasFilter()) {\n        nestedClause.filter = nestedResult.getFilter();\n      }\n      if (nestedResult.hasAggregations()) {\n        nestedClause.aggs = nestedResult.getAggregations();\n      }\n    }\n\n    var innerClause = Object.assign({}, _defineProperty({}, type, (0, _utils.buildClause)(field, null, opts)), nestedClause);\n\n    Object.assign(aggregations, _defineProperty({}, aggName, innerClause));\n  }\n\n  return {\n    /**\n     * Add an aggregation clause to the query body.\n     *\n     * @param  {string|Object} type      Name of the aggregation type, such as\n     *                                   `'sum'` or `'terms'`.\n     * @param  {string}        field     Name of the field to aggregate over.\n     * @param  {Object}        [options] (optional) Additional options to\n     *                                   include in the aggregation.\n     * @param  {string}        [name]    (optional) A custom name for the\n     *                                   aggregation, defaults to\n     *                                   `agg_<type>_<field>`.\n     * @param  {Function}      [nest]    (optional) A function used to define\n     *                                   sub-aggregations as children. This\n     *                                   _must_ be the last argument.\n     *\n     * @return {bodybuilder} Builder.\n     *\n     * @example\n     * bodybuilder()\n     *   .aggregation('max', 'price')\n     *   .build()\n     *\n     * bodybuilder()\n     *   .aggregation('percentiles', 'load_time', {\n     *     percents: [95, 99, 99.9]\n     *   })\n     *   .build()\n     *\n     * bodybuilder()\n     *   .aggregation('date_range', 'date', {\n     *     format: 'MM-yyy',\n     *     ranges: [{ to: 'now-10M/M' }, { from: 'now-10M/M' }]\n     *   })\n     *   .build()\n     *\n     * bodybuilder()\n     *   .aggregation('diversified_sampler', 'user.id', { shard_size: 200 }, (a) => {\n     *     return a.aggregation('significant_terms', 'text', 'keywords')\n     *   })\n     *   .build()\n     */\n    aggregation: function aggregation() {\n      makeAggregation.apply(undefined, arguments);\n      return this;\n    },\n\n\n    /**\n     * Alias for `aggregation`.\n     *\n     * @return {bodybuilder} Builder.\n     */\n    agg: function agg() {\n      return this.aggregation.apply(this, arguments);\n    },\n    getAggregations: function getAggregations() {\n      return aggregations;\n    },\n    hasAggregations: function hasAggregations() {\n      return !!(0, _size2.default)(aggregations);\n    }\n  };\n}","/home/travis/build/npmtest/node-npmtest-bodybuilder/node_modules/bodybuilder/repl.js":"'use strict'\n\nvar repl = require('repl')\nvar bodybuilder = require('./lib/index')\n\nrepl.start('bodybuilder > ').context.bodybuilder = bodybuilder\n","/home/travis/build/npmtest/node-npmtest-bodybuilder/node_modules/bodybuilder/src/index.js":"import _ from 'lodash'\nimport queryBuilder from './query-builder'\nimport filterBuilder from './filter-builder'\nimport aggregationBuilder from './aggregation-builder'\nimport { sortMerge } from './utils'\n\n/**\n * **http://bodybuilder.js.org**\n *\n * **https://github.com/danpaz/bodybuilder**\n *\n * Bodybuilder is a small library that makes elasticsearch queries easier to\n * write, read, and maintain 💪. The whole public api is documented here, but\n * how about a simple example to get started:\n *\n * ```\n * bodybuilder()\n *   .query('match', 'message', 'this is a test')\n *   .build()\n *\n * // results in:\n * {\n *   query: {\n *     match: {\n *       message: 'this is a test'\n *     }\n *   }\n * }\n * ```\n *\n * You can chain multiple methods together to build up a more complex query.\n *\n * ```\n * bodybuilder()\n *   .query('match', 'message', 'this is a test')\n *   .filter('term', 'user', 'kimchy')\n *   .notFilter('term', 'user', 'cassie')\n *   .aggregation('terms', 'user')\n *   .build()\n * ```\n *\n * For nested sub-queries or sub-aggregations, pass a function as the last\n * argument and build the nested clause in the body of that function. For\n * example:\n *\n * ```\n * bodybuilder()\n *   .query('nested', 'path', 'obj1', (q) => {\n *     return q.query('match', 'obj1.color', 'blue')\n *   })\n *   .build()\n * ```\n *\n * The entire elasticsearch query DSL is available using the bodybuilder api.\n * There are many more examples in the docs as well as in the tests.\n *\n * @return {bodybuilder} Builder.\n */\nexport default function bodybuilder () {\n  let body = {}\n\n  return Object.assign(\n    {\n      /**\n       * Set a sort direction on a given field.\n       *\n       * @param  {String} field             Field name.\n       * @param  {String} [direction='asc'] A valid direction: 'asc' or 'desc'.\n       * @returns {bodybuilder} Builder.\n       */\n      sort(field, direction = 'asc') {\n        body.sort = body.sort || []\n\n        if (_.isArray(field)) {\n\n            if(_.isPlainObject(body.sort)) {\n                body.sort = [body.sort]\n            }\n\n            if(_.isArray(body.sort)) {\n                _.each(field, (sorts) => {\n                    _.each(sorts, (value, key) => {\n                        sortMerge(body.sort, key, value)\n                    })\n                })\n            }\n        } else {\n          sortMerge(body.sort, field, direction)\n        }\n        return this\n      },\n\n      /**\n       * Set a *from* offset value, for paginating a query.\n       *\n       * @param  {Number} quantity The offset from the first result you want to\n       *                           fetch.\n       * @returns {bodybuilder} Builder.\n       */\n      from(quantity) {\n        body.from = quantity\n        return this\n      },\n\n      /**\n       * Set a *size* value for maximum results to return.\n       *\n       * @param  {Number} quantity Maximum number of results to return.\n       * @returns {bodybuilder} Builder.\n       */\n      size(quantity) {\n        body.size = quantity\n        return this\n      },\n\n      /**\n       * Set any key-value on the elasticsearch body.\n       *\n       * @param  {String} k Key.\n       * @param  {any}    v Value.\n       * @returns {bodybuilder} Builder.\n       */\n      rawOption(k, v) {\n        body[k] = v\n        return this\n      },\n\n      /**\n       * Collect all queries, filters, and aggregations and build the entire\n       * elasticsearch query.\n       *\n       * @param  {string} [version] (optional) Pass `'v1'` to build for the\n       *                            elasticsearch 1.x query dsl.\n       *\n       * @return {Object} Elasticsearch query body.\n       */\n      build(version) {\n        const queries = this.getQuery()\n        const filters = this.getFilter()\n        const aggregations = this.getAggregations()\n\n        if (version === 'v1') {\n          return _buildV1(body, queries, filters, aggregations)\n        }\n\n        return _build(body, queries, filters, aggregations)\n      }\n\n    },\n    queryBuilder(),\n    filterBuilder(),\n    aggregationBuilder()\n  )\n}\n\nfunction _buildV1(body, queries, filters, aggregations) {\n  let clonedBody = _.cloneDeep(body)\n\n  if (!_.isEmpty(filters)) {\n    _.set(clonedBody, 'query.filtered.filter', filters)\n\n    if (!_.isEmpty(queries)) {\n      _.set(clonedBody, 'query.filtered.query', queries)\n    }\n\n  } else if (!_.isEmpty(queries)) {\n    _.set(clonedBody, 'query', queries)\n  }\n\n  if (!_.isEmpty(aggregations)) {\n    _.set(clonedBody, 'aggregations', aggregations)\n  }\n  return clonedBody\n}\n\nfunction _build(body, queries, filters, aggregations) {\n  let clonedBody = _.cloneDeep(body)\n\n  if (!_.isEmpty(filters)) {\n    let filterBody = {}\n    let queryBody = {}\n    _.set(filterBody, 'query.bool.filter', filters)\n    if (!_.isEmpty(queries.bool)) {\n      _.set(queryBody, 'query.bool', queries.bool)\n    } else if (!_.isEmpty(queries)) {\n      _.set(queryBody, 'query.bool.must', queries)\n    }\n    _.merge(clonedBody, filterBody, queryBody)\n  } else if (!_.isEmpty(queries)) {\n    _.set(clonedBody, 'query', queries)\n  }\n\n  if (!_.isEmpty(aggregations)) {\n    _.set(clonedBody, 'aggs', aggregations)\n  }\n\n  return clonedBody\n}\n\nmodule.exports = bodybuilder\n"}